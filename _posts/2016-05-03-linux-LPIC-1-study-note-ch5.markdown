---
layout: post
title:  "Linux LPIC-1 Study Note(CH 5)"
date:   2016-05-03 15:59:00 +0800
categories: [LPIC-1, linux]
---

# Chapter 05 指令的基本操作 #

Linux的指令使用環境是Bash Shell, Shell的字面意思是**層**或**殼**, 在Linux中, **Shell是介於人機之間的一個介面**, 可透過shell將指令傳達給核心, 而核心也會通過shell將資訊輸出, 因此我們常說的command(指令), 就是shell command(層指令)的簡稱。

## 指令的入門操作 ##

### 指令使用環境 ###

在Linux之下預設的 shell 為 `bash` , 此外, 常見的還有 `Bornel shell` 、 `C shell` 、 `Korn shell` 等。下面列出指令使用的時機:

#### 處理效率 ####

特別是遠端控制, 指令是最有效率的一種方式。

舉例: 重啟FTP。 使用指令, 也就一兩個指令即可; 圖形介面, 需傳送較大的資料, 明顯速度較慢。

再者, 透過圖形介面需使用滑鼠在多視窗間切換, 步驟繁瑣。

#### 沒有圖形介面 ####

當所在的環境沒圖形介面, 就非得使用指令了。Ex: 文字介面的初始模式; 使用Putty遠端連線控制。

#### 遠端控制 ####

除非在區域網路內, 否則連線的頻寬將是一大瓶頸。一般使用指令遠端控制主機, 是最節省資源的方式。

#### 多功能的混合搭配技巧 ####

圖形視窗都是固定的指令操作, 如果要彈性設定多個指令或參數混合使用, 需指令。

### 基本操作技巧 ###

有些指令可直接執行, 但大部分指令都需添加參數才能使用。Ex: useradd 帳號名稱, 才是完整指令, 「帳號名稱」就是參數一部分。

1. 打開使用的環境
2. 挑選合適的指令
3. 添加正確的參數

	可使用 man 指令查詢參數用法

底下列出指令使用上的注意事項:

#### 路徑 ####

一般我們執行指令, 都是直接輸入指令名稱, 如 `ls` 。事實上 `ls` 位於 `/bin` 的目錄之下, 那為什麼執行 `ls` 就相當於執行 `/bin/ls`?

這就是系統上定義了指令的路徑, 讓我們輸入指令後, 會自動到這些路徑下尋找指令。若是路徑錯誤或沒有正確的指定, 可能導致錯誤的執行, 或找不到該指令。

要知道設定的路徑, 可執行已下指令:

	echo $PATH

Ex:

	ubuntu@ip-172-31-7-139:~$ echo $PATH
	/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games


一般而言, 指令位在 `/bin` 、 `/usr/bin` 、 `/sbin` 、`/usr/sbin` 之中。若執行指令卻出現 `command not found` 字樣, 首先確定該指令的位置是否落在指令的路徑中, 或是系統上根本沒有安裝該套件。

---

※經驗談

新增指令路徑(`/opt/abc` to $PATH): `export PATH=$PATH:/opt/abc` , 執行後生效, 但重新登入就沒效果了。如果要每次登入都生效, 可將此行加入到 `/etc/profile` 的最後一行。

---

#### 指令順序 ####

若在 `/bin` 以及 `/usr/bin` 之下都有 `ls` 指令, 那當執行 `ls` , 會執行哪個?第一優先是 shell 內建的指令, 再來才是路徑中的設定順序, 因此若有相同名稱指令, 須注意其順序設定, 或直接輸入完整路徑。

---

※經驗談

指令執行順序是安全上很大的考量。Ex: 如果 `/tmp` 也在指令執行的路徑中, 並且是第一優先, 那只要在 `/tmp` 之下放個 `ls` , 則會優先執行 `/tmp/ls` 而非正確的 `/bin/ls` 。任何人對 `/tmp` 之下的檔案都有修改權限, 因此這樣設定會造成很大的危害。

---

#### 參數順序 ####

一般除特殊狀況, 參數是沒有順序的, Ex: 輸入「-a -v」與輸入「-v -a」以及「-av」效果相同。但若參數後指定要接檔案或特殊物件, 如「-p cmd1 -v cmd2」, 則不能任意變更順序。

#### 常用參數 ####

- `--help`: 顯示說明畫面
- `--version`, `-V`: 顯示版本資訊
- `-v`: 繁瑣模式, 顯示完整的執行過程
- `-i`: 指定介面/交談模式
- `-o`: 輸出介面
- `-l`: 長列表
- `-q`, `-s`: 安靜模式, 不列出任何輸出或是錯誤訊息
- `-R`: 遞迴處理, 連同目錄下所有子目錄一起處理
- `-z`: 壓縮

### 基本的Shell內建指令 ###

就是當我們登入 Shell 時就可使用的指令, 內建於 Shell 中, 而不是以檔案形式存在的指令。基本 Shell 內建指令主要有:

- `alias`
- `bg`
- `cd`
- `declare`
- `enable`
- `exit`
- `export`
- `help`
- `history`
- `jobs`
- `suspend`
- `ulimit`
- `umask`
- `unaias`
- `unset`

分述如下:

#### alias: 定義指令及參數的別名 ####

語法: alias [-p] [別名] [=指令]

- `-p`: 列出目前所有別名設定(可加可不加, 結果相同)

別名: 列出指定的別名
別名 = 指令: 設定該指令的別名

列出現有的別名設定

	# alias

若要將 `ls -al` 的別名設為 `ll`:

	# alias ll='ls -al'

#### cd: 切換目錄 ####

語法: cd

切換目錄到 `/opt` :

	# cd /opt

切換目錄到上一層目錄:

	# cd ../

#### declare: 宣告 shell 變數 ####

語法: declare [參數] name[=value]

- `-i`: 先算出運算式, 再將結果傳給變數
- `-p`: 宣告的變數為 shell 變數
- `-r`: 宣告的變數為唯讀
- `-x`: 宣告的變數為環境變數

顯示目前的 shell 變數:

	# declare

要顯示所有的環境變數:

	# declare -x

#### enable: 啟動或關閉 shell 的內建指令 ####